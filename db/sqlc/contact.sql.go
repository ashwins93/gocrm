// Code generated by sqlc. DO NOT EDIT.
// source: contact.sql

package db

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (first_name, last_name, email, account_id)
VALUES ($1, $2, $3, $4)
RETURNING id, first_name, last_name, email, account_id, created_at
`

type CreateContactParams struct {
	FirstName sql.NullString `json:"firstName"`
	LastName  string         `json:"lastName"`
	Email     string         `json:"email"`
	AccountID sql.NullInt64  `json:"accountID"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.AccountID,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AccountID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteContact, id)
	return err
}

const getContact = `-- name: GetContact :one
SELECT id, first_name, last_name, email, account_id, created_at
FROM contacts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetContact(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AccountID,
		&i.CreatedAt,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT id, first_name, last_name, email, account_id, created_at
FROM contacts
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListContactsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.AccountID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET first_name = $2,
  last_name = $3,
  email = $4,
  account_id = $5
WHERE id = $1
RETURNING id, first_name, last_name, email, account_id, created_at
`

type UpdateContactParams struct {
	ID        int64          `json:"id"`
	FirstName sql.NullString `json:"firstName"`
	LastName  string         `json:"lastName"`
	Email     string         `json:"email"`
	AccountID sql.NullInt64  `json:"accountID"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.AccountID,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AccountID,
		&i.CreatedAt,
	)
	return i, err
}
